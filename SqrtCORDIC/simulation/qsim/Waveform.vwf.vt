// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2019 16:51:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SqrtCORDIC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SqrtCORDIC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] InpNum;
reg Start;
reg clk;
// wires                                               
wire [23:0] Result;
wire Stop;

// assign statements (if any)                          
SqrtCORDIC i1 (
// port map - connection between master ports and signals/registers   
	.InpNum(InpNum),
	.Result(Result),
	.Start(Start),
	.Stop(Stop),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// InpNum[ 31 ]
initial
begin
	InpNum[31] = 1'b0;
end 
// InpNum[ 30 ]
initial
begin
	InpNum[30] = 1'b0;
end 
// InpNum[ 29 ]
initial
begin
	InpNum[29] = 1'b0;
end 
// InpNum[ 28 ]
initial
begin
	InpNum[28] = 1'b0;
end 
// InpNum[ 27 ]
initial
begin
	InpNum[27] = 1'b0;
end 
// InpNum[ 26 ]
initial
begin
	InpNum[26] = 1'b1;
end 
// InpNum[ 25 ]
initial
begin
	InpNum[25] = 1'b1;
end 
// InpNum[ 24 ]
initial
begin
	InpNum[24] = 1'b1;
end 
// InpNum[ 23 ]
initial
begin
	InpNum[23] = 1'b1;
end 
// InpNum[ 22 ]
initial
begin
	InpNum[22] = 1'b1;
end 
// InpNum[ 21 ]
initial
begin
	InpNum[21] = 1'b0;
end 
// InpNum[ 20 ]
initial
begin
	InpNum[20] = 1'b1;
end 
// InpNum[ 19 ]
initial
begin
	InpNum[19] = 1'b0;
end 
// InpNum[ 18 ]
initial
begin
	InpNum[18] = 1'b0;
end 
// InpNum[ 17 ]
initial
begin
	InpNum[17] = 1'b0;
end 
// InpNum[ 16 ]
initial
begin
	InpNum[16] = 1'b0;
end 
// InpNum[ 15 ]
initial
begin
	InpNum[15] = 1'b0;
end 
// InpNum[ 14 ]
initial
begin
	InpNum[14] = 1'b1;
end 
// InpNum[ 13 ]
initial
begin
	InpNum[13] = 1'b1;
end 
// InpNum[ 12 ]
initial
begin
	InpNum[12] = 1'b1;
end 
// InpNum[ 11 ]
initial
begin
	InpNum[11] = 1'b0;
end 
// InpNum[ 10 ]
initial
begin
	InpNum[10] = 1'b0;
end 
// InpNum[ 9 ]
initial
begin
	InpNum[9] = 1'b1;
end 
// InpNum[ 8 ]
initial
begin
	InpNum[8] = 1'b1;
end 
// InpNum[ 7 ]
initial
begin
	InpNum[7] = 1'b0;
end 
// InpNum[ 6 ]
initial
begin
	InpNum[6] = 1'b0;
end 
// InpNum[ 5 ]
initial
begin
	InpNum[5] = 1'b1;
end 
// InpNum[ 4 ]
initial
begin
	InpNum[4] = 1'b1;
end 
// InpNum[ 3 ]
initial
begin
	InpNum[3] = 1'b0;
end 
// InpNum[ 2 ]
initial
begin
	InpNum[2] = 1'b0;
end 
// InpNum[ 1 ]
initial
begin
	InpNum[1] = 1'b1;
end 
// InpNum[ 0 ]
initial
begin
	InpNum[0] = 1'b1;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #6181 1'b1;
	Start = #37969 1'b0;
end 
endmodule

